import { useEffect, useMemo, useState } from "react";
import "./App.css";
import Parent from "./components/Parent";
import { arrayOfNumbers, sort } from "./utils/utils";
function App() {
  //create an array of 1000 random numbers and assign it to data
  const [data, setData] = useState<number[]>();
  useEffect(() => {
    //when the component mounts, set data to the array of numbers generated by utility func
    setData(arrayOfNumbers(1000));
  }, []);
  //dummy state to re-render the App component
  const [dummyState, setDummyState] = useState<boolean>(false);
  function sortData() {
    //check if data exists, 'cause it is initially undefined
    if (data) {
      return sort(data); //sort the data
    }
  }

  //memoize (aka "Cache") the sorted data. They will only change when "data" changes
  const memoizedData = useMemo(sortData, [data]);
  return (
    <div className="App">
      <>
        <div>useCallBack</div>
      </>
      <Parent />
      <>
        <div>MEMOIZED EXAMPLE</div>
        <button
          className="btn"
          onClick={() => {
            setDummyState((dummy) => !dummy);
            console.log("Re-rendering app.tsx");
          }}
        >
          {" "}
          Toggle a dummy state
        </button>
        {memoizedData?.map((data, index) => (
          <li key={index}>{data}</li>
        ))}
      </>
    </div>
  );
}
export default App;
